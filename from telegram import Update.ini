try:
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
    from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
except ModuleNotFoundError:
    raise ModuleNotFoundError("The 'python-telegram-bot' package is not installed. Please install it using 'pip install python-telegram-bot'.")

import sqlite3

# Шаги для ConversationHandler
NAME, PHONE, EMAIL = range(3)

# Инициализация базы данных
def init_db():
    conn = sqlite3.connect("submissions.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS submissions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        phone TEXT,
                        email TEXT
                      )''')
    conn.commit()
    conn.close()

# Команда /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Добро пожаловать! Пожалуйста, введите ваше имя:")
    return NAME

# Обработка имени
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    reply_keyboard = [[KeyboardButton("Отправить номер телефона", request_contact=True)]]
    await update.message.reply_text(
        "Спасибо! Теперь отправьте ваш номер телефона:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return PHONE

# Обработка номера телефона
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        context.user_data['phone'] = update.message.contact.phone_number
    else:
        context.user_data['phone'] = update.message.text

    await update.message.reply_text("Отлично! Теперь введите вашу электронную почту:", reply_markup=None)
    return EMAIL

# Обработка электронной почты
async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['email'] = update.message.text

    # Сохранение данных в базу данных
    conn = sqlite3.connect("submissions.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO submissions (name, phone, email) VALUES (?, ?, ?)",
                   (context.user_data['name'], context.user_data['phone'], context.user_data['email']))
    conn.commit()
    conn.close()

    await update.message.reply_text("Спасибо! Ваши данные сохранены.")
    return ConversationHandler.END

# Команда /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Операция отменена.")
    return ConversationHandler.END

if __name__ == "__main__":
    init_db()
    
    app = ApplicationBuilder().token("ВАШ_ТОКЕН").build()

    # Определение ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, get_phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    print("Бот запущен!")
    app.run_polling()

